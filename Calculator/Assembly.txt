section .data
    num1 db '0',0
    num2 db '0',0
    operator db '+',0
    result db '0',0

section .text
    global _start

_start:
    ; read num1
    mov eax, 3
    mov ebx, 0
    mov ecx, num1
    mov edx, 2
    int 0x80

    ; read operator
    mov eax, 3
    mov ebx, 0
    mov ecx, operator
    mov edx, 2
    int 0x80

    ; read num2
    mov eax, 3
    mov ebx, 0
    mov ecx, num2
    mov edx, 2
    int 0x80

    ; convert input to numeric
    mov eax, [num1]
    sub eax, 48
    mov [num1], eax
    mov eax, [num2]
    sub eax, 48
    mov [num2], eax

    ; perform operation
    mov eax, [num1]
    cmp byte [operator], '+'
    je add
    cmp byte [operator], '-'
    je sub
    cmp byte [operator], '*'
    je mul
    cmp byte [operator], '/'
    je div
    jmp end

add:
    add eax, [num2]
    jmp print

sub:
    sub eax, [num2]
    jmp print

mul:
    mul eax, [num2]
    jmp print

div:
    div eax, [num2]
    jmp print

print:
    ; convert result to ascii
    add eax, 48
    mov [result], eax

    ; write result to stdout
    mov eax, 4
    mov ebx, 1
    mov ecx, result
    mov edx, 2
    int 0x80

end:
    ; exit program
    mov eax, 1
    xor ebx, ebx
    int 0x80


This program prompts the user to enter two numbers and an operator, performs the corresponding calculation based on the operator and prints the result to the console. 
The code uses the int 0x80 instruction to call the Linux kernel's system call interface. mov instruction is used to load values into registers, 
eax is used to specify the system call number, ebx is used to specify the file descriptor, in this case is 0 (stdin), ecx points to the variable where the input is stored and `